package listeners;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;

import main.MainUI;
import munsell.MunsellColor;

/**
 * @author Nick Morris
 *
 */
public class HighlightPanel implements MouseListener
{

    @Override
    public void mouseClicked(MouseEvent arg0)
    {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void mouseEntered(MouseEvent evt)
    {
        
        // get the JPanel that was hovered over
        JPanel panel = (JPanel) evt.getSource();
        
        // get the panel background color for the border
        Color borderColor = panel.getBackground();
        
        // make it different
        borderColor = borderColor.darker();
        
        
        // set the border on mouse hover
        panel.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, borderColor));
    }

    @Override
    public void mouseExited(MouseEvent evt)
    {
        // get the JPanel that was hovered over
        JPanel panel = (JPanel) evt.getSource();
        
        // hide the border on mouse hover
        panel.setBorder(BorderFactory.createMatteBorder(3,3,3,3, new Color(229, 229, 229)));
    }

    @Override
    public void mousePressed(MouseEvent evt)
    {
    	
    	
    	if (evt.isPopupTrigger()) 
    	{
    		// create new popup
    		JPopupMenu popup = new JPopupMenu();
    		
    		// add the palette text
    		popup.add(new JMenuItem("Add to Palette"));
    		
    		// show the popup at the mouse position
    		popup.show(evt.getComponent(), evt.getX(), evt.getY());
    		
    		// don't continue
    		return;
    	}
    	
        // get the selected JPanel
        JPanel panel = (JPanel) evt.getSource();
        
        // iterator count
        int i = 0;
        
        // munsell values 
        float value = 0;
        float chroma = 0;
        

        // iterate through the components to get the labels
        for (Component comp : panel.getComponents())
        {
            
            // make sure we're looking at a JLabel
            if (comp instanceof JLabel)
            {
                // check if we're setting value or chroma
                if (i == 0)
                    value = Float.parseFloat(((JLabel) comp).getText().substring(4));
                else 
                    chroma = Float.parseFloat(((JLabel) comp).getText().substring(4));

                // increment
                i++;
            }
        }

        // set the new selected color
        MainUI.setSelectedColor(new MunsellColor(MainUI.getUserHueNum(), value, chroma));
        
        // redraw the tabs
        MainUI.redraw(true);
    }

    @Override
    public void mouseReleased(MouseEvent arg0)
    {
        // TODO Auto-generated method stub
        
    }

}



