package main;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import conversion.Converter;
import listeners.HighlightPanel;
import munsell.HueCode;
import munsell.MunsellColor;
import setCreator.ColorSetCreator;
import setCreator.MunDimension;


/**
 * Builds the UI.
 * 
 * @author Nick Morris
 *
 */
public class MainUI
{
	
	// dimension values
	private static final int WIDTH = 800;
	private static final int HEIGHT = 700;
	private static int COLOR_ROWS = 11;
	private static int COLOR_COLS = 10;
	
	// user set variables
	private static float userHueNum;
	private static HueCode userHueCode;
	
	// get a color converter
	private static Converter converter = Converter.getConverter();
	
	// the main frame that holds everything
	private static JFrame mainFrame;
	
	// the main tab container
	private static JTabbedPane tabs;
	
	private static MunsellColor selectedColor;
	
	/**
	 * Get the selected color.
	 * 
	 * @return		the selected color
	 */
	public static MunsellColor getSelectedColor()
	{
		return selectedColor;
	}
	
	/**
	 * Set the selected color.
	 * 
	 * @param newSelectedColor		the new selected color
	 */
	public static void setSelectedColor(MunsellColor newSelectedColor)
	{
		selectedColor = newSelectedColor;
	}
	
	/**
	 * Get the users hue num.
	 * 
	 * @return	user hue number
	 */
	public static float getUserHueNum() 
	{
		return userHueNum;
	}
	
	/**
	 * Get the users hue code.
	 * 
	 * @return	user hue code
	 */
	public static HueCode getUserHueCode()
	{
		return userHueCode;
	}
	
	/**
	 * Set the users hue num.
	 * 
	 * @param num the num to set
	 */
	public static void setUserHueNum(float num)
	{
	   
		userHueNum = num;
	    
	}
	
	/**
	 * Set the users hue code.
	 * 
	 * @param code	the hue code to set
	 */
	public static void setUserHueCode(HueCode code)
	{
		userHueCode = code;
	}
	
	/**
	 * Redraw the UI.
	 * 
	 * @param showHarmoniousColorsTab		should we switch tabs on redraw()
	 */
	public static void redraw(boolean showHarmoniousColorsTab)
	{
		// clear the tabs
		tabs.removeAll();

		// create a new panel to replace the current one
		JTabbedPane newPanel = createBase();
		
		// add the new panel with the updated colors
		mainFrame.setContentPane(newPanel);
		
		if (showHarmoniousColorsTab)
			tabs.setSelectedIndex(1);
			
	}
	
	/**
	 * Create the UI.
	 * 
	 * @param args arguments
	 */
	public static void main(String[] args)
	{
		
		// set the starting color
		setUserHueNum(2.5f);
		setUserHueCode(HueCode.R);
        		
		
		// create a new JFrame
		mainFrame = new JFrame();
		
		
		// set frame size
		mainFrame.setSize(WIDTH, HEIGHT);
		
		// set the frame layout
		mainFrame.setLayout(new BorderLayout());
		
		// make the frame visible
		mainFrame.setVisible(true);


		// draw the colors
		JTabbedPane pan = createBase();
		
		mainFrame.setContentPane(pan);
		mainFrame.setVisible(true);
	}
	

	/**
	 * Create a row of hues.
	 * 
	 * @param start		the starting color.
	 * @return			the row of hues.
	 */
	public static JPanel createHueRow(MunsellColor start)
	{
		// JPanel to return
		JPanel row = new JPanel();
		
		// set grid layout with 10 columns
		row.setLayout(new GridLayout(1,10));
		
		// create color set instance
        ColorSetCreator setMkr = new ColorSetCreator(2.5f, 1.0f, 2.0f);

        // set the hue limit
        setMkr.setHueLimit(start.getHueNum() + 9);
        
        // increment by one
        setMkr.setHueIncrement(1);

        // get the colors
        MunsellColor[] createdSet = setMkr.create1DSet(MunDimension.HUE, start);
        
        JLabel label;
        Color labelColor;
        
        // iterate through the colors
        for (int i = 0; i < createdSet.length; i++)
        {
        	// create the label
        	label = new JLabel(String.valueOf(createdSet[i].getHueNum())
        			+ String.valueOf(createdSet[i].getHueCode()));

        	label.setHorizontalAlignment(SwingConstants.CENTER);
        	
        	
        	// convert munsell to RGB
        	labelColor = converter.munsellToRGB(createdSet[i]);
        	
        	label.setBackground(labelColor);
        	
        	row.add(label);
        }

		
		// return the newly created row
		return row;
	}
	
	
	/**
	 * Create a row with incrementing chroma values.
	 * 
	 * @param start		the starting color.
	 * @return			a JPanel row of colors with increasing chroma values. 
	 */
	public static JPanel createChromaRow(MunsellColor start)
	{
		
		// null check start
		
		// JPanel to return
		JPanel row = new JPanel();
		row.setLayout(new GridLayout(1,COLOR_COLS));
		
		// create a creator instance
        ColorSetCreator setMkr = new ColorSetCreator(2.5f, 1.0f, 0.0f);

        // set the limit to twenty
        setMkr.setChromaLimit(20f);
        
        // increment chroma by 22.5R
        setMkr.setChromaIncrement(2.0f);

        // create a new set (row)
        MunsellColor[] createdSet = setMkr.create1DSet(MunDimension.CHROMA, start);
        
        // color for showing n values
        MunsellColor valueColor = new MunsellColor(0f,0f,0f);
        
        // the overall container for the colors
        JPanel container;
        
        // the color for the labels
        Color labelColor;
        
        // variable for showing the colors that can't be
        // represented by rgb
        Color invalidColor = new Color(204,204,204);
        
        // value colors as rgb 
        Color valueColorRGB;
        
        
        // iterate through the colors
        // use enhanced for loop
        for (int i = 0; i < createdSet.length; i++)
        {
        	
        	// create the container
        	container = new JPanel();
        	
        	// set the layout to grid
        	container.setLayout(new GridLayout(2,1));
        	
        	// convert munsell to RGB
        	labelColor = converter.munsellToRGB(createdSet[i]);

        	// give each panel a blank border
        	container.setBorder(BorderFactory.
        	        createMatteBorder(3,3,3,3, new Color(229, 229, 229)));

        	// create color labels
        	// JLabel hueLabel = new JLabel(" " + String.valueOf(createdSet[i].getHueNum())
        			// + createdSet[i].getHueCode().toString());
        	JLabel valueLabel = new JLabel(" V: " + String.valueOf(createdSet[i].getValue()));
        	JLabel chromaLabel = new JLabel(" C: " + String.valueOf(createdSet[i].getChroma()));
        	
        	
        	
        	
        	// hueLabel.setForeground(Color.black);
        	
        	// check to see if this is a valid color
        	// i.e: not black or white
        	if (labelColor.getRGB() != -1 && labelColor.getRGB() != -16777216)
        	{
                // give each panel a mouse listener
                container.addMouseListener(new HighlightPanel());
                
                // set background/foreground
        		container.setBackground(labelColor);
                valueLabel.setForeground(Color.black);
                chromaLabel.setForeground(Color.black);

                // change foreground colors for contrast
                if (createdSet[i].getValue() < 5)
                {
                    valueLabel.setForeground(Color.WHITE);
                    chromaLabel.setForeground(Color.WHITE);
                }
                
                // add labels
                container.add(valueLabel);
                container.add(chromaLabel);
        	} 
        	else
        	{
        		if (i == 0)
        		{
        			
        			container.setLayout(new GridLayout(1,1));
        			// set the 'N' text
        			valueLabel.setText("N" + (int)createdSet[i].getValue());
        			valueLabel.setHorizontalAlignment(JLabel.CENTER);
        			
        			// set the value for the color
        			valueColor.setValue(createdSet[i].getValue());
        			
        			// convert munsell to rgb
        			valueColorRGB = converter.munsellToRGB(valueColor);
        			
        			// set background to new rgb value
        			container.setBackground(valueColorRGB);
        			
        			// add the label
        			container.add(valueLabel);
        			
        			// change text to white for contrast
        			if (createdSet[i].getValue() < 5)
        				valueLabel.setForeground(Color.WHITE);
        		} 
        		else
        		{
        			// set background colors for the invalid color panels
                    container.setBackground(invalidColor);
                    valueLabel.setForeground(invalidColor);
                    chromaLabel.setForeground(invalidColor);
        		}
        	}
        	
        	// add labels
        	// container.add(hueLabel);
        	
        	// add the new label with color to the row
        	row.add(container);
        }

		
		// return the newly created row
		return row;
	}
	
	
	/**
	 * Create the base layouts and frames.
	 * 
	 * @return	a JFrame
	 */
	public static JTabbedPane createBase()
	{

		// top level panel that can be replaced
		JPanel topContainer = new JPanel();
		
		// sector panel
		JPanel selectorPanel = new JPanel();
		
		// create the main panel
		selectorPanel.setLayout(new BoxLayout(selectorPanel, BoxLayout.Y_AXIS));
		
		MunsellColor start = null;

		// uses the reprentableHue to get a Hue that can be displayed 
        start = new MunsellColor(Converter.getRepresentableHue(getUserHueNum()), 
        		getUserHueCode(), 10.0f, 0.0f);

		// create the bottom panel
		JPanel bottomPanel = new JPanel();
		
		JTextField hueField = new JTextField(getUserHueNum() + getUserHueCode().toString());
		
		JButton changeHueButton = new JButton("Change Hue");
		
		// add the action listener
		changeHueButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent evt)
			{
				
				// get the input text
				String input = hueField.getText();
				
				// pattern to look for letters
				Pattern pattern = Pattern.compile("[A-Z]|[a-z]");
				
				// look for the letter
				Matcher matcher = pattern.matcher(input);
				
				// chMainUI.javaeck for a match
				if (matcher.find())
				{
					// get the index for where the letter(s) starts
					int index = matcher.start();
					
					setUserHueNum(Float.valueOf(input.substring(0, index)));
					
					// get the string version of the hueCode
					String hueCode = input.substring(index);
					
					// "convert" the string hue code to the enum version
					switch(hueCode)
					{
						case "R":
							setUserHueCode(HueCode.R);
							break;
						case "RP":
							setUserHueCode(HueCode.RP);
							break;
						case "P":
							setUserHueCode(HueCode.P);
							break;
						case "PB":
							setUserHueCode(HueCode.PB);
							break;
						case "B":
							setUserHueCode(HueCode.B);
							break;
						case "BG":
							setUserHueCode(HueCode.BG);
							break;
						case "G":
							setUserHueCode(HueCode.G);
							break;
						case "GY":
							setUserHueCode(HueCode.GY);
							break;
						case "Y":
							setUserHueCode(HueCode.Y);
							break;
						case "YR":
							setUserHueCode(HueCode.YR);
							break;
						default :
							break;
					}
				}
				
				// redraw everything
				redraw(false);
			}
			
		});
		
		// add the hue text field
		bottomPanel.add(hueField);
		
		// add the change hue button
		bottomPanel.add(changeHueButton);

		// set opaque so colors can be set
		selectorPanel.setOpaque(true);
		
		// create 9 rows
		for (int i = COLOR_ROWS; i > 0; i--)
		{
			// add all the rows
			selectorPanel.add(createChromaRow(start));
			
			start.setValue(start.getValue() - 1);
		}
		
		/*
		JPanel valuePanel = new JPanel();
		valuePanel.setLayout(new BoxLayout(valuePanel, BoxLayout.Y_AXIS));
		valuePanel.setOpaque(true);
		valuePanel.add(createValueColumn());
		*/
			
		topContainer.setLayout(new BorderLayout());
		// topContainer.add(createValueColumn(),BorderLayout.WEST);
		topContainer.add(selectorPanel, BorderLayout.CENTER);
		topContainer.add(bottomPanel, BorderLayout.SOUTH);
		//frame.add(test);
			
		// create a new tabbed pane
		tabs = new JTabbedPane();

		tabs.addTab("Main Color", null, topContainer);
		
		// don't show the harmonious colors tab if there isn't a selected color
		if (selectedColor != null)
			tabs.addTab("Harmonious Colors", null, harmoniousTab(selectedColor));
		
		// return the panel 
		return tabs;
		
	}
	
	/**
	 * Create a formatted panel for each harmonious color.
	 * 
	 * @param	harmoniousColors	list of harmonious colors
	 * @param	title				the title of the type of harmonious colors
	 * @return	a formatted JPanel
	 */
	public static JPanel constructHarmoniousPane(MunsellColor[] harmoniousColors, String title)
	{
		
		// pane to return
		JPanel formattedPane = new JPanel();
		
		// set box layout
		formattedPane.setLayout(new BoxLayout(formattedPane, BoxLayout.Y_AXIS));
		
		formattedPane.setBorder(BorderFactory.createEmptyBorder(10, 5, 10, 5));
		
		// set the title
		JLabel harmoniousTitle = new JLabel(title);
		
		// make font bolder and larger
		harmoniousTitle.setFont(harmoniousTitle.getFont().deriveFont(Font.BOLD, 14f));
		
		// set horizontal alignment (not working :/)
		harmoniousTitle.setHorizontalAlignment(JLabel.LEFT);
		
		// add the title 
		formattedPane.add(harmoniousTitle);
		
		// create a container to hold the colors
		JPanel colorContainer = new JPanel();
		
		// set the grid layout columns to the number of colors
		colorContainer.setLayout(new GridLayout(1, harmoniousColors.length, 10, 0));
		
		// iterate through the colors
		for (MunsellColor color : harmoniousColors)
		{
			// new color panel
			JPanel colorPanel = new JPanel();
			
			// colorPanel.setLayout(new BoxLayout(colorPanel, BoxLayout.Y_AXIS));
			
			// set opaque
			colorPanel.setOpaque(true);
			
			Color labelColor = converter.munsellToRGB(color);
			
			// panel to hold rgb info
			JPanel rgbPanel = new JPanel();
			rgbPanel.setOpaque(true);
			
			// panel to hold munsell info
			JPanel munsellPanel = new JPanel();
			munsellPanel.setOpaque(true);

			// set the background to the munsell color
			colorPanel.setBackground(labelColor);
			
			// add rgb values
			rgbPanel.add(new JLabel("R: " + String.valueOf(labelColor.getRed())));
			rgbPanel.add(new JLabel("G: " +  String.valueOf(labelColor.getGreen())));
			rgbPanel.add(new JLabel("B: " + String.valueOf(labelColor.getBlue())));
			
			// add munsell values
			munsellPanel.add(new JLabel("H: " + String.valueOf(color.getHueNum())));
			munsellPanel.add(new JLabel("V: " +  String.valueOf(color.getValue())));
			munsellPanel.add(new JLabel("C: " + String.valueOf(color.getChroma())));
			
			// add panels
			colorPanel.add(rgbPanel);
			colorPanel.add(munsellPanel);
			
			// add the new color panel
			colorContainer.add(colorPanel);
			
			formattedPane.add(colorContainer);
		}
		
		// return the formatted pane
		return formattedPane;
	}
	
	
	/**
	 * Create the harmonious colors tab.
	 * 
	 * @param	start the color to start with.
	 * @return	a JScrollPane with harmonious colors	
	 */
	public static JPanel harmoniousTab(MunsellColor start)
    {
		
		// inner pane for scroll pane
		JPanel harmoniousContainer = new JPanel();
		
		harmoniousContainer.setLayout(new BoxLayout(harmoniousContainer, BoxLayout.Y_AXIS));
		
		// create the container to return
        // JScrollPane harmoniousContainer = new JScrollPane(innerPane);
        
        harmoniousContainer.setOpaque(true);
        
        // get harmonious colors
        MunsellColor[] analogous = MunsellColor.matchAnalogous(start);
        MunsellColor[] square = MunsellColor.matchSquare(start);
        MunsellColor[] triad = MunsellColor.matchTriad(start);
        
        // matchTetrad returns 2D array, so create a 1D array
        // to copy the values into
        MunsellColor[][] tetradOriginal = MunsellColor.matchTetrad(start, analogous[0]);
        MunsellColor[] tetrad = new MunsellColor[4];
        
        // get complementary color and add it to an array
        MunsellColor[] complementary = new MunsellColor[1];
        complementary[0] = MunsellColor.matchComplementary(start);
        
        
        // count variable 
        int count = 0;
        
        // copy 2D array values into 1D array
        for (int i = 0; i < tetradOriginal.length; i++)
        {
        	for (int j = 0; j < tetradOriginal[i].length; j++)
        	{
        		tetrad[count] = tetradOriginal[i][j];
        		count++;
        	}
        }
        
        // create and add the complementary color panes
        JPanel complementaryPane = constructHarmoniousPane(complementary, "Complementary");
        harmoniousContainer.add(complementaryPane);
        JPanel analogousPane = constructHarmoniousPane(analogous, "Analogous");
        harmoniousContainer.add(analogousPane);
        JPanel triadPane = constructHarmoniousPane(triad, "Triad");
        harmoniousContainer.add(triadPane);
        JPanel squarePane = constructHarmoniousPane(square, "Square");
        harmoniousContainer.add(squarePane);
        JPanel tetradPane = constructHarmoniousPane(tetrad, "Tetrad");
        harmoniousContainer.add(tetradPane);

        // return the container
        return harmoniousContainer;
    }
	
	
}
