package munsell;

import java.awt.Color;

/**
 * Munsell Color class.
 * 
 * @author Michael DeProspo
 * 
 */
public class MunsellColor
{

    private float hueNum;
    private HueCode hueCode;
    private float value;
    private float chroma;
    private String munNotation;
    private Color rgb;

    /**
     * Creates empty munsellColor.
     */
    public MunsellColor()
    {

    }

    /**
     * Creates a MunsellColor with Color value of RGB.
     * 
     * @param rgb the Color for munsell that will be used to get Munsell Color
     */
    public MunsellColor(Color rgb)
    {
        this.rgb = rgb;
    }

    /**
     * Creates a MunsellColor with hueNum, hueCode, value, chroma.
     * @param hueNum  num for hue, 0 to 100
     * @param hueCode huecode, letter
     * @param value   N0-N10 - shades of gray
     * @param chroma  0-infinity, intensity
     */
    public MunsellColor(float hueNum, HueCode hueCode, float value, float chroma)
    {

        setHueNum(hueNum);
        setHueCode(hueCode);
        setValue(value);
        setChroma(chroma);
    }
     

    /**
     * Creates a MunsellColor with just hue, value, and chroma floats.
     * 
     * @param hueNum num for hue, 0 to 100
     * @param value  0 to 10 black to white
     * @param chroma 0 to infinity
     */
    public MunsellColor(float hueNum, float value, float chroma)
    {
        setHueNum(hueNum);
        setValue(value);
        setChroma(chroma);
        setHueCode(MunsellColor.matchHueCode(this.hueNum));
    }

    /**
     * Matches the hue 0 to 100 float to a valid HueCode.
     * 
     * @param hueNum the 0 to 100 hue float
     * @return a valid Hue Code
     */
    public static HueCode matchHueCode(float hueNum)
    {

        int enumIndex = (int) (hueNum / 10);
        // HueNum's tens place

        if (Float.compare(hueNum, 100.0f) >= 0 || Float.compare(hueNum, 0.0f) <= 0)
        {
            return HueCode.values()[HueCode.values().length - 1];
        }

        else if (Float.compare(hueNum % 10, 0.0f) == 0)
        {

            return HueCode.values()[enumIndex - 1];

        }

        else
        {

            return HueCode.values()[enumIndex];
        }

    }

    /**
     * Matches a complementary color for a Munsell color.
     * 
     * @param mun the original munsell color
     * @return the complementary MunsellColor ;
     */
    public static MunsellColor matchComplementary(MunsellColor mun)
    {

        float compHue = 0; // the complement's hue

        if (mun == null)
        {

            System.err.println("Cannot Complement null MunsellColor.");
            return null;
        }

        compHue = (mun.getHueNum() + 50.0f) % 100;
        return new MunsellColor(compHue, mun.getValue(), mun.getChroma());

    }

    /**
     * Calculates the Analogous colors for a given munsell.
     * 
     * @param mun the given munsell color
     * @return an array that contains the right and left analogous colors
     */
    public static MunsellColor[] matchAnalogous(MunsellColor mun)
    {

        final float leftAnalog = 90.0f; // analogous adding number
        final float rightAnalog = 10.0f; // analogous adding number

        // array to the left and right analogs
        MunsellColor[] analogousColors = new MunsellColor[2];

        if (mun == null)
        {

            System.err.println("There is no harmony in nothing. Argument null.");
            return null;
        }

        // left
        analogousColors[0] = new MunsellColor((mun.getHueNum() + leftAnalog) % 100,
                mun.getValue(), mun.getChroma());

        // right
        analogousColors[1] = new MunsellColor((mun.getHueNum() + rightAnalog) % 100,
                mun.getValue(), mun.getChroma());

        return analogousColors;

    }

    /**
     * Calculate the Split-Complementary colors of a given munsell color.
     * 
     * @param mun given munsell color
     * @return the split complementary colors in array
     */
    public static MunsellColor[] matchSplitComp(MunsellColor mun)
    {

        if (mun == null)
        {

            System.err.println("There is no harmony in nothing. Argument null.");
            return null;
        }

        return MunsellColor.matchAnalogous(MunsellColor.matchComplementary(mun));
    }

    
    /**
     * Calculate tetrad colors based on the given munsell colors. 
     * @param mun1 the first given munsell
     * @param mun2 the second given munsell  
     * @throws IllegalArgumentException 
     * @return 2d array of the 4 munsell colors that make the tetrad 
     */
    public static MunsellColor[][] matchTetrad (MunsellColor mun1, MunsellColor mun2)
            throws IllegalArgumentException
    {
        
        MunsellColor[][] tetradColors = new MunsellColor[2][2]; // tetrad pairs 
        
        if (mun1 == null || mun2 == null)
        {

            System.err.println("There is no harmony in nothing. Argument null.");
            return null;
        }
        
        if (mun2.equals(MunsellColor.matchComplementary(mun1)))
        {
            
            throw new IllegalArgumentException
            ("MunsellColor args cannot be compliments of each other");
        }
        
        tetradColors[0][0] = mun1;
        tetradColors[0][1] = MunsellColor.matchComplementary(mun1);
        tetradColors[1][0] = mun2;
        tetradColors[1][1] = MunsellColor.matchComplementary(mun2);
          
        return tetradColors;
        
        
    }
    
    
    /**
     * Calculate the Square colors for a given munsell.
     * @param mun the given munsell color 
     * @return the square set of munsell colors 
     */
    public static MunsellColor[] matchSquare ( MunsellColor mun)
    {
        
        MunsellColor[] squareSet = new MunsellColor[4];  //square set of munsell colors 
        float increment = 0;       // loop increment 
        
        
        if (mun == null)
        {

            System.err.println("There is no harmony in nothing. Argument null.");
            return null;
        }
        
        
        for (int i = 0; i < squareSet.length; i++ )
        {
            
            squareSet[i] = new MunsellColor((mun.getHueNum() + increment) % 100,
                    mun.getValue(), mun.getChroma());
            increment += 25.0f;
        }
        
        return squareSet;
          
        
    }
    
    
    /**
     * Calculate triad colors for a given munsell color. 
     * @param mun the given munsell
     * @return set of triad colors as an array 
     */
    public static MunsellColor[] matchTriad ( MunsellColor mun)
    {
        
        MunsellColor[] triadSet = new MunsellColor[3];  //set of triad munsell colors 
        float increment = 0;       // loop increment 
        
        
        if (mun == null)
        {

            System.err.println("There is no harmony in nothing. Argument null.");
            return null;
        }
        
        
        for (int i = 0; i < triadSet.length; i++ )
        {
            
            triadSet[i] = new MunsellColor((mun.getHueNum() + increment) % 100,
                    mun.getValue(), mun.getChroma());
            increment += 33.33f;
        }
        
        return triadSet;
          
        
    }
    
    
    /**
     * Returns munNotation - munsell notation.
     * 
     * @return munNotation the munsell hue, value, chroma
     */
    public String getMunNotation()
    {
        munNotation = "" + hueNum + hueCode + "-" + value + "-" + chroma;
        return munNotation;
    }

    /**
     * Returns munsell value.
     * 
     * @return value
     */
    public float getValue()
    {
        return value;
    }

    /**
     * Returns chroma value.
     * 
     * @return chroma
     */
    public float getChroma()
    {
        return chroma;
    }

    /**
     * Returns rgb color for this munsell color.
     * 
     * @return rgb the color
     */
    public Color getColor()
    {
        return rgb;
    }

    /**
     * Gets hueNum.
     * 
     * @return hueNum
     */
    public float getHueNum()
    {
        return hueNum;
    }

    /**
     * Returns hueCode.
     * 
     * @return hueCode
     */
    public HueCode getHueCode()
    {
        return hueCode;
    }

    /**
     * Returns string representation of munsell color.
     * 
     * @return String of munsell color
     */
    public String munColor()
    {
        return "Hue: " + getHueNum() + getHueCode() + ", Value: N"
                + getValue() + ", Chroma: " + getChroma();
    }

    /**
     * Sets rgb color to specified color.
     * @param newRGB Color to set to
     */
    public void setColor(Color newRGB)
    {
        this.rgb = newRGB;
    }

    /**
     * Sets value to specified value.
     * 
     * @param value value to set to
     */
    public void setValue(float value)
    {
        if (value < 0)
        {
            this.value = 0;
        } else if (value > 10)
        {
            this.value = 10;
        } else
        {
            this.value = value;
        }
    }

    /**
     * Sets chroma to specified value.
     * 
     * @param chroma the chroma to set to
     */
    public void setChroma(float chroma)
    {
        if (chroma < 0)
        {
            this.chroma = 0;
        } else
        {
            this.chroma = chroma;
        }
    }

    /**
     * Sets hueCode to specified code.
     * 
     * @param hueCode the code to set to
     */
    public void setHueCode(HueCode hueCode)
    {
        this.hueCode = hueCode;
    }

    /**
     * Sets the hueNum to specified value.
     * 
     * @param hueNum value to set to
     */
    public void setHueNum(float hueNum)
    {
        if (hueNum < 0)
        {
            this.hueNum = 0;
        } else if (hueNum > 100)
        {
            this.hueNum = 100;
        } else
        {
            this.hueNum = hueNum;
        }
    }

    /**
     * Autogenerated hashCode method based on chroma, hueNum, and Value. munNotation
     * string isn't factored into the hash code.
     * 
     * @return hashCode
     */
    @Override
    public int hashCode()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(chroma);
        result = prime * result + ((hueCode == null) ? 0 : hueCode.hashCode());
        result = prime * result + Float.floatToIntBits(hueNum % 100);
        result = prime * result + Float.floatToIntBits(value);
        return result;
    }
    /**
     * Creates a new MunsellColor based off averages of two munsellColors.
     * @param m1 first color to be mixed
     * @param m2 the second color to be mixed
     * @return the new mixed color
     */
    public MunsellColor mixColors(MunsellColor m1, MunsellColor m2)
    {
    	float x1;
    	float x2;
    	float y1;
    	float y2;
    	float x3;
    	float y3;
    	double angle;
    	angle = 3.6 * (Math.abs(m1.getHueNum() - m2.getHueNum())); //this might be incorrect
    	double radians = Math.toRadians(angle);
    	x1 = m1.getChroma()*((float)Math.cos(radians)); //x of first color
    	y1 = m1.getChroma()*((float)Math.sin(radians)); //y of first color
    	x2 = m2.getChroma()*((float)Math.cos(radians)); 
    	y2 = m2.getChroma()*((float)Math.sin(radians));
    	x3 = (x1+x2)/2; //midpoint of x 
    	y3 = (y1+y2)/2; //midpoint of y 
    	float chroma = (float)Math.sqrt(Math.pow(y3,2)+Math.pow(x3, 2)); //distance of point from origin
    	angle = y3/x3;
    	if(x3 < 0)
    		angle +=180;
    	else if(x3 == 0 && y3 > 0)
    		angle = 90;
    	else if (x3<0 && y3 <0)
    		angle = 270;
    	radians = Math.toRadians(angle);
    	float hue = (float)Math.atan(radians); //angle of theta (hue)
    	float value = (m1.getValue()+m2.getValue())/2; // average of the two values
    	return new MunsellColor(hue,value, chroma );
    }
    /*
     * used for comparisons between MunsellColor objects munNotation isn't factored
     * in
     */
    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        MunsellColor other = (MunsellColor) obj;
        if (Float.floatToIntBits(chroma) != Float.floatToIntBits(other.chroma))
            return false;
        if (hueCode != other.hueCode)
            return false;
        if (Float.floatToIntBits(hueNum) != Float.floatToIntBits(other.hueNum)
                && Float.compare(hueNum % 100, other.hueNum % 100) != 0)
            return false;
        if (Float.floatToIntBits(value) != Float.floatToIntBits(other.value))
            return false;
        return true;
    }
}










